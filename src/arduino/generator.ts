// ---------- Arduino code generator ----------


import { MappingKind } from "../types/methodTypes";




export function generateArduinoSketch(opts: {
    name: string;
    mapping: MappingKind;
    thresholds?: number[]; // for binning/patterns
    min?: number;
    max?: number;
    sensorVar?: string; // runtime value variable name
}) {
    const {
        name,
        mapping,
        thresholds = [/* e.g., 3-bin edges */],
        min = 0,
        max = 100,
        sensorVar = "value",
    } = opts;

    // generic vibration and tone mapping on Arduino (UNO-style)
    const code = `// Auto-generated by Accessible Data Exploration Tool\n// Sketch: ${name}\n// Mapping: ${mapping}\n\n// --- Pins (adjust for your board) ---\nconst int VIB_PIN = 5;      // PWM pin for vibration motor driver\nconst int BUZZER_PIN = 8;   // digital pin for piezo buzzer (tone())\n\n// --- Runtime sensor value (replace with your sensor read) ---\nint ${sensorVar} = 0;\n\nvoid setup() {\n  pinMode(VIB_PIN, OUTPUT);\n  pinMode(BUZZER_PIN, OUTPUT);\n}\n\nvoid hapticStrength(int v, int vmin, int vmax){\n  v = constrain(v, vmin, vmax);\n  int pwm = map(v, vmin, vmax, 0, 255);\n  analogWrite(VIB_PIN, pwm);\n}\n\nvoid hapticPattern(int bin){\n  // 0: short, 1: medium, 2: long\n  int d = 150 + 150 * bin;\n  analogWrite(VIB_PIN, 200); delay(d); analogWrite(VIB_PIN, 0); delay(120);\n}\n\nvoid hapticRepeat(int count){\n  for(int i=0;i<count;i++){ analogWrite(VIB_PIN, 220); delay(120); analogWrite(VIB_PIN,0); delay(100);} \n}\n\nvoid tonePitch(int v, int vmin, int vmax){\n  v = constrain(v, vmin, vmax);\n  int freq = map(v, vmin, vmax, 220, 880);\n  tone(BUZZER_PIN, freq, 180);\n}\n\nvoid toneRhythm(int count){\n  for(int i=0;i<count;i++){ tone(BUZZER_PIN, 660, 120); delay(200);}\n}\n\nint toBin(int v, int vmin, int vmax){\n  // equal width bins using 3 thresholds\n  int w = max(1, (vmax - vmin) / 3);\n  int idx = (v - vmin) / w;\n  if(idx < 0) idx = 0; if(idx > 2) idx = 2;\n  return idx;\n}\n\nvoid loop(){\n  // TODO: replace the next line with real sensor read\n  ${sensorVar} = analogRead(A0);\n\n  // --- Apply mapping ---\n  // Choose only one of the following blocks or switch by a mode variable\n\n  // AUDIO_PITCH\n  // tonePitch(${sensorVar}, ${min}, ${max});\n\n  // AUDIO_RHYTHM (e.g., repeat per threshold crossings or frequency bucket)\n  // toneRhythm(toBin(${sensorVar}, ${min}, ${max}) + 1);\n\n  // HAPTIC_STRENGTH\n  // hapticStrength(${sensorVar}, ${min}, ${max});\n\n  // HAPTIC_PATTERN\n  // hapticPattern(toBin(${sensorVar}, ${min}, ${max}));\n\n  // HAPTIC_REPEAT\n  // hapticRepeat(toBin(${sensorVar}, ${min}, ${max}) + 1);\n\n  delay(50);\n}\n`;
    return code;
}